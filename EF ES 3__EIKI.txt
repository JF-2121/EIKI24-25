#separator:tab
#html:true
Was ist Künstliche Intelligenz (KI)? / What is Artificial Intelligence (AI)?	Die Wissenschaft und Technik der Entwicklung intelligenter Maschinen, insbesondere Computerprogramme. / The science and engineering of making intelligent machines, especially intelligent computer programs.
Wie definiert John McCarthy KI? / How does John McCarthy define AI?	Die Wissenschaft und Technik, intelligente Maschinen zu erschaffen. / The science and engineering of making intelligent machines.
Wann wird ein System als intelligent angesehen? / When is a system considered intelligent?	Wenn ein menschlicher Beobachter nicht zwischen Mensch und Maschine unterscheiden kann. / When a human observer cannot distinguish between human and machine.
Ist intelligentes Verhalten gleich Intelligenz? / Is intelligent behavior the same as intelligence?	Ein System kann intelligent erscheinen, auch wenn es keine tatsächliche Intelligenz besitzt. / A system can appear intelligent even if it lacks actual intelligence.
Was verdeutlicht das Chinesische Zimmer Argument? / What does the Chinese Room Argument illustrate?	Es zeigt, dass intelligentes Verhalten nicht notwendigerweise Intelligenz bedeutet. / It demonstrates that intelligent behavior does not necessarily mean intelligence.
Was ist der Unterschied zwischen starker und schwacher KI? / What is the difference between strong and weak AI?	Starke KI bewältigt alle intellektuellen Aufgaben, während schwache KI nur auf spezifische Aufgaben beschränkt ist. / Strong AI can handle any intellectual task, while weak AI is limited to specific tasks.
Was bedeutet es, rational zu handeln? / What does it mean to act rationally?	Es bedeutet, die Handlungen zu maximieren, die zum Erfolg führen basierend auf der verfügbaren Information. / It means maximizing actions that lead to success based on the available information.
Wie untersucht die Kognitive Wissenschaft das Denken des Menschen? / How does Cognitive Science study human thinking?	Durch die Erstellung von Modellen und Theorien, die das Verhalten und die neuronale Aktivität im Gehirn vorhersagen. / By creating models and theories that predict behavior and neural activity in the brain.
Welche Disziplinen haben zur Entwicklung der KI beigetragen? / Which disciplines have contributed to the development of AI?	Philosophie, Mathematik, Psychologie, Wirtschaft, Linguistik, Neurowissenschaften, und Regelungstechnik. / Philosophy, Mathematics, Psychology, Economics, Linguistics, Neuroscience, and Control Theory.
In welchen Bereichen findet KI heute Anwendung? / In which fields is AI applied today?	Autonome Planung, Spiele, Sprachverarbeitung, Robotik, wissenschaftliche Entdeckungen, Computersehen. / Autonomous planning, games, natural language processing, robotics, scientific discoveries, computer vision.
"<b>What AI can and cannot do</b><br><br><img src=""paste-8d8c54b5c845b2969866e323ec5f37a6af6b761e.jpg""><br><br><img src=""paste-21d2e256fcc7e1a8e3907c979a78d4af772e820e.jpg""><br><img src=""paste-4acd53f127a27e2d67858b94920c1933b7df042a.jpg""><br><img src=""paste-1fd7a92495f56a3ff08715e25f06825c74c427c4.jpg""><br><img src=""paste-4a5b39c7720db28e45de119618b99d97ae54cf92.jpg"">"	
What are the two main components of an AI system?	Environment and Agent.
How is an environment defined in the context of AI?	The environment is the surroundings or conditions in which an AI agent operates; it can be real or artificial.
What is a discrete environment?	An environment with a limited number of distinct, clearly defined states.
What makes an environment observable?	If the complete state of the environment can be determined at each time point, it is observable; otherwise, it is partially observable or unobservable.
What differentiates static from dynamic environments?	"A static environment does not change while an agent acts; a dynamic environment can change independently of the agent&#x27;s actions."
What is a reflex agent?	An agent that selects actions based only on the current percept, ignoring history.
How do model-based agents differ from reflex agents?	Model-based agents maintain a model of the environment to keep track of the world state, unlike reflex agents.
What defines a rational action?	An action that maximizes the agent’s expected performance based on its knowledge.
Why is performance measurement important for AI agents?	Performance measurement is critical as it evaluates how well an agent’s actions achieve the desired outcome.
What is the role of a utility function in AI?	A utility function rates actions or scenarios based on the desired result, providing a scale to measure preferences.
"<b>Characteristics of Environments</b><br><br><img src=""paste-62d0b08131d276f475d51df8d5c1ca1eaab0e4be.jpg""><br><br><img src=""paste-9232cb561bc4fdf461db18061e4433e157478f47.jpg""><br><br><img src=""paste-6780cb6bf4075fec7a47fbc81b84640d196e6357.jpg"">"	
"<b>How to Make Agents Intelligent<br></b><br><img src=""paste-02c77b7bcb100f1147859ef434392d926c44cd48.jpg""><br><img src=""paste-6ef2dfcd7ee6ae98d55b1ec95eda2ea2861694a7.jpg""><br><img src=""paste-48959f9946d1107f5ddcd7347a832e1e2e7d721c.jpg""><br><img src=""paste-69812672a0f01dc167333878592b159851603f05.jpg"">"	
What defines an AI system?	AI systems consist of rational agents acting in environments to optimize specific measures, using various types of intelligence strategies.
What characterizes a goal-based agent?	Goal-based agents project action outcomes into the future, compare expected results to goals, and adjust behavior based on this comparison.
What is the focus of problem-solving agents?	Problem-solving agents aim to achieve defined goals and often need human-readable problems reformulated for computational processing.
What are the steps to formulate a solvable problem?	1) Define the goal, 2) Formulate the problem based on the goal, translating it into components an agent can process.
What are state and transition definitions in problem-solving?	A state represents a situation in the environment; transitions define possible actions to move between states.
What defines a single-state problem?	A single-state problem includes state space, initial state, actions, goal test, and cost functions for each action.
What is the purpose of a state-space graph?	It maps all states reachable from the initial state, forming a structure to visualize paths to the goal.
How is finding a route defined as a problem?	Initial state: Arad; Goal: Reach Bucharest; Actions: Define reachable cities; Cost: Based on travel distance or speed.
How is real-world complexity managed in problem-solving?	By using abstraction to simplify the problem, removing unnecessary details to make problem-solving computationally feasible.
What are the components of the 8-puzzle problem?	States: Tile locations; Actions: Move blank tile; Goal test: Match goal layout; Path cost: Steps required.
What defines the 8-Queens problem?	Place 8 queens on a chessboard so no two queens threaten each other; States: Queen configurations; Goal: No threats; Path cost: Not of primary interest.
What is a planning problem in AI?	It involves starting from an initial state, transforming through actions to reach a goal while anticipating future states and outcomes.
What is a tree search algorithm?	A search method that explores possible paths by iteratively expanding nodes to find a path from the root to the goal.
What metrics evaluate search strategies?	Completeness, time complexity, space complexity, and optimality, based on branching factor, goal depth, and tree depth.
What are common uninformed search strategies?	Breadth-First Search (BFS), Depth-First Search (DFS), Uniform-Cost Search (UCS), Depth-Limited, Iterative Deepening, and Bidirectional Search.
What is the goal of Uniform-Cost Search?	To find a path with the lowest cumulative cost by expanding the least expensive nodes first, using a priority queue.
How does BFS differ from DFS?	BFS uses a FIFO approach, exploring level by level and guaranteeing optimality for equal-cost steps; DFS explores depth-first, with a LIFO stack, faster but not always optimal.
What is iterative deepening search (IDS)?	"A depth-limited search that increases depth incrementally; combines DFS&#x27;s low memory use with BFS&#x27;s completeness."
How does bidirectional search work?	Starts searches simultaneously from the initial and goal states, stopping when paths meet, reducing time and space complexity.
What is a key limitation of uninformed search?	Exponential time and space complexity, making it impractical for large problem spaces without additional information.
What characterizes informed search algorithms?	Informed searches use heuristics or extra knowledge to prioritize nodes, guiding the search toward goal states more efficiently.
What is a heuristic in informed search?	A rule or function estimating the cost to reach the goal, providing a guide to expand the most promising nodes first.
What does Greedy Best-First Search prioritize?	Expands nodes with the smallest estimated distance to the goal (heuristic) but can get stuck in local minima without reaching the goal.
"What is A* Search&#x27;s evaluation function?"	A* uses f(n) = g(n) + h(n), where g(n) is the cost so far, and h(n) is the heuristic cost to the goal, aiming to find an optimal path.
Under what conditions is A* optimal?	A* is optimal if the heuristic is admissible (never overestimates) and consistent (adheres to triangle inequality).
What is an admissible heuristic?	A heuristic that never overestimates the true cost to the goal, ensuring that A* finds an optimal solution if such a heuristic is used.
What is a consistent heuristic?	A heuristic where the estimated cost does not exceed the cost between successive nodes plus the remaining estimate to the goal.
Why is heuristic dominance important in A*?	Dominant heuristics (closer estimates) reduce node expansion, improving search efficiency while still guiding to optimal solutions.
What are relaxed problems in heuristic design?	Problems with fewer restrictions than the original, used to design heuristics that guarantee admissibility by providing achievable cost estimates.
How can multiple heuristics be combined effectively?	By taking the maximum value among admissible heuristics, the combined heuristic remains admissible and often more effective.
What is the benefit of graph search over tree search?	Graph search detects and avoids repeated states, saving time and memory by not re-exploring previously expanded nodes.
What is a memory-bound alternative to A*?	Memory-bounded searches like IDA*, RBFS, or SMA* limit memory use by discarding the least promising nodes or iterating depth.
What key concepts are covered in search strategies?	Problem formulation, tree/graph structures, uninformed vs. informed strategies, BFS, DFS, Greedy Best-first, A*, and heuristics.
Introduction to AI Systems; What is an AI system? 	 An AI system is defined as the study of rational agents and their environments, focusing on optimizing specific measures using intelligent behaviors.
Goal-Based Agents; What is the main focus of a goal-based agent? 	 Goal-based agents project consequences of actions into the future and compare them to predefined goals to determine the best course of action.
Problem-Solving Agents; What are problem-solving agents focused on? 	 Problem-solving agents focus on achieving their goals by systematically exploring possible solutions.
State Space Definition; What is a state space in problem-solving? 	 A state space is the set of all possible situations (states) that can be reached from an initial state through a series of actions.
Single-State Problem; What are the four components of a single-state problem? 	 The components include: 1) State Space &amp; Initial State, 2) Descriptions of Actions, 3) Goal Test, and 4) Costs associated with actions.
Tree Search Algorithms; How are tree search algorithms structured? 	 Tree search algorithms treat the state space as a tree, where each node represents a state and edges represent actions.
Uninformed Search; What characterizes uninformed search strategies? 	 Uninformed search strategies have no prior knowledge about the domain and expand nodes systematically without using heuristics.
Breadth-First Search (BFS); What is the main characteristic of BFS? 	 BFS explores all nodes level by level, ensuring completeness and optimality if all actions have equal cost, but has high memory usage.
Uniform-Cost Search (UCS); How does UCS differ from BFS? 	 UCS expands nodes based on the lowest cumulative cost, making it optimal even when costs vary between actions.
Depth-First Search (DFS); What is a key limitation of DFS? 	 DFS may fail to find a solution in infinite-depth spaces and does not guarantee an optimal solution.
Iterative Deepening Search; What is the advantage of Iterative Deepening Search? 	 It combines the space efficiency of DFS with the completeness of BFS by incrementally increasing the depth limit.
Bidirectional Search; How does bidirectional search work? 	 It starts from both the initial and goal states simultaneously and stops when paths from both directions meet, reducing search time.
Heuristics; What role do heuristics play in informed search? 	 Heuristics provide a rule of thumb to estimate the cost of reaching the goal, guiding the search more efficiently than uninformed strategies.
Greedy Best-First Search; What is the key idea behind Greedy Best-First Search? 	 It expands nodes with the lowest estimated cost to the goal (using the heuristic) but may get stuck in local minima.
A* Search; How does A* search optimize pathfinding? 	 A* uses the evaluation function f(n) = g(n) + h(n), where g(n) is the cost so far and h(n) is the heuristic estimate to the goal, ensuring optimality if h is admissible.
Admissible Heuristics; What makes a heuristic admissible? 	 A heuristic is admissible if it never overestimates the true cost to reach the goal, ensuring that A* search finds the optimal solution.
Consistent Heuristics; What defines a consistent heuristic? 	 A heuristic is consistent if the estimated cost from one node to another does not exceed the actual cost plus the heuristic from the successor node to the goal.
Relaxed Problems; How can relaxed problems be used to design heuristics? 	 Relaxed problems have fewer constraints, and the cost of their optimal solution can serve as an admissible heuristic for the original problem.
Dominance of Heuristics; Why is heuristic dominance important? 	 A dominant heuristic reduces the number of nodes expanded by providing a closer estimate to the true cost, thus making the search more efficient.
Combining Heuristics; How can multiple heuristics be combined? 	 By taking the maximum value of multiple admissible heuristics, the combined heuristic remains admissible and often leads to fewer node expansions.
Graph Search vs Tree Search; What is the advantage of graph search over tree search? 	 Graph search detects and avoids repeated states, reducing redundant expansions and saving time and memory.
Iterative Deepening A* (IDA*); What is the key difference between A* and IDA*? 	 IDA* uses a depth-first approach with an increasing f-cost limit, optimizing memory usage while maintaining completeness and optimality.
Memory-Bounded A* Search; What are memory-bounded alternatives to A*? 	 Algorithms like Recursive Best-First Search (RBFS) and Simplified Memory-Bounded A* (SMA*) reduce memory usage by discarding less promising nodes.
Optimization Problems; Was ist ein Optimierungsproblem? 	 Ein Optimierungsproblem ist eines, bei dem alle Zustände/Lösungen zu unterschiedlichen Graden eine Lösung sein können, aber das Ziel ist es, den Zustand zu finden, der die Lösung gemäß einer Zielfunktion optimiert.
Objective Function; Was ist eine Zielfunktion? 	 Eine Zielfunktion gibt an, wie gut ein Zustand ist, auch im Vergleich zu anderen Zuständen. Ihr Wert wird je nach Optimierungsproblem entweder minimiert oder maximiert.
Convergence; Was beschreibt Konvergenz? 	 Konvergenz beschreibt die Eigenschaft einer Folge von (Funktions-)Werten, sich einem Grenzwert immer mehr anzunähern.
Global Optimum; Was ist ein globales Optimum? 	 Ein globales Optimum ist das Extremum (Minimum oder Maximum) der Zielfunktion für den gesamten Eingaberaum.
Local Optimum; Was ist ein lokales Optimum? 	 Ein lokales Optimum ist das Extremum (Minimum oder Maximum) der Zielfunktion für einen bestimmten Bereich des Eingaberaums, z.B. ein Becken in einem Minimierungsproblem.
Local Search; Was sind die Vorteile und Nachteile von Local Search Algorithmen? 	 Vorteile: Benötigen wenig Speicher, finden in sehr großen Zustandsräumen eine vernünftige Lösung. Nachteile: Keine Garantie für Vollständigkeit oder Optimalität.
Hill Climbing; Was ist das Problem von Hill Climbing? 	 Das Problem von Hill Climbing ist, dass der Algorithmus stoppt, sobald er den Gipfel eines Hügels erreicht, der nicht unbedingt optimal sein muss (Plateaus, Grate, Schultern).
Randomized Hill Climbing; Was ist Randomized Hill Climbing? 	 Randomized Hill Climbing ist eine Variante des Hill Climbing, bei der mehrere Iterationen mit unterschiedlichen Startpositionen durchgeführt werden, um verschiedene lokale Optima zu finden.
Stochastic Hill Climbing; Was ist Stochastic Hill Climbing? 	 Stochastic Hill Climbing wählt den Nachfolgeknoten zufällig aus, wobei bessere Knoten eine höhere Wahrscheinlichkeit haben, ausgewählt zu werden.
Simulated Annealing; Was ist Simulated Annealing? 	 Simulated Annealing ist eine lokale Suchtechnik, die gelegentlich Schritte in eine Richtung unternimmt, die keine Verbesserung darstellt, um lokalen Optima zu entkommen. Die Wahrscheinlichkeit solcher Schritte nimmt im Laufe der Zeit ab.
Temperature in Simulated Annealing; Was ist die Temperatur in Simulated Annealing? 	 Die Temperatur ist ein Hyperparameter, der steuert, wie häufig „schlechte Züge“ gemacht werden, um lokalen Optima zu entkommen. Sie nimmt im Laufe des Prozesses exponentiell ab.
Gradient Descent; Was ist Gradient Descent? 	 Gradient Descent ist eine Optimierungsstrategie, die als Hill Climbing in einem kontinuierlichen Zustandsraum beschrieben werden kann. Es minimiert eine Kostenfunktion durch kleine Schritte in Richtung des steilsten Abstiegs.
Learning Rate; Was ist die Lernrate in Gradient Descent? 	 Die Lernrate ist ein Hyperparameter, der steuert, wie schnell das Modell an das Problem angepasst wird. Kleinere Lernraten erfordern mehr Trainingsdurchläufe, größere Lernraten führen zu schnelleren Änderungen.
Beam Search; Was ist Beam Search? 	 Beam Search verfolgt k Zustände gleichzeitig, anstatt nur einen. Bei jeder Iteration werden alle Nachfolger der k Zustände generiert und die k besten Nachfolger ausgewählt.
Adversarial Search; Was ist Adversarial Search? 	 Adversarial Search ist eine Suche, bei der man das Problem untersucht, das entsteht, wenn man versucht, der Welt und anderen Spielern vorauszuplanen, die gegen uns planen oder widersprüchliche Ziele haben.
Game Tree; Was ist ein Game Tree? 	 Ein Game Tree ist ein Baum, der die Zustände eines Spiels darstellt, wobei die Knoten die Zustände und die Kanten die Züge der Spieler repräsentieren. Terminalknoten haben einen Nutzenwert, der das Ergebnis des Spiels angibt.
Minimax Algorithmus; Was ist der Minimax Algorithmus? 	 Der Minimax Algorithmus ist eine Strategie, die dem DFS-Konzept folgt, bei der jeder Knoten entweder MIN oder MAX ist. MAX maximiert den Wert, MIN minimiert ihn.
Alpha-Beta Pruning; Was ist Alpha-Beta Pruning? 	 Alpha-Beta Pruning ist eine optimierte Version des Minimax Algorithmus, die durch das Beschneiden von Knoten die Menge der zu untersuchenden Zustände reduziert, ohne die Korrektheit zu verlieren.
Zero-Sum Games; Was sind Zero-Sum Games? 	 Zero-Sum Games sind Spiele, bei denen der Gewinn eines Spielers den Verlust des anderen darstellt, sodass die Nettoänderung des Reichtums null ist.
Perfect Information; Was ist ein Spiel mit perfekter Information? 	 Ein Spiel mit perfekter Information ist eines, bei dem alle Spieler zu jedem Zeitpunkt alle Informationen über den Zustand des Spiels haben.
Imperfect Information; Was ist ein Spiel mit unvollständiger Information? 	 Ein Spiel mit unvollständiger Information ist eines, bei dem nicht alle Informationen über den Zustand des Spiels zu jedem Zeitpunkt bekannt sind.
Deterministic vs Non-deterministic; Was ist der Unterschied zwischen deterministischen und nicht-deterministischen Spielen? 	 In deterministischen Spielen ist der nächste Zustand vollständig durch den aktuellen Zustand und die ausgeführte Aktion bestimmt. In nicht-deterministischen Spielen sind die Aktionen durch ihre möglichen Ergebnisse charakterisiert, aber es sind keine Wahrscheinlichkeiten zugeordnet.
Travelling Salesman Problem; Was ist das Travelling Salesman Problem? 	 Das Travelling Salesman Problem ist ein Optimierungsproblem, bei dem ein Handelsreisender eine Reihe von Städten besuchen und dabei die kürzeste mögliche Route finden muss.
n-Queens Problem; Was ist das n-Queens Problem? 	 Das n-Queens Problem besteht darin, n Damen auf einem Schachbrett so zu platzieren, dass keine Dame eine andere schlagen kann (d.h. keine zwei Damen können in derselben Zeile, Spalte oder Diagonale stehen).
SAT Problem; Was ist das SAT Problem? 	 Das SAT Problem besteht darin, eine erfüllbare Belegung für eine gegebene aussagenlogische Formel in konjunktiver Normalform (CNF) zu finden oder zu beweisen, dass keine existiert.
"Cook&#x27;s Theorem; Was besagt Cook&#x27;s Theorem? "	" Cook&#x27;s Theorem besagt, dass das SAT Problem NP-vollständig ist."
AlphaGo; Was ist AlphaGo? 	 AlphaGo ist eine Kombination aus Monte-Carlo-Baumsuche und neuronalen Netzen, die von DeepMind entwickelt wurde, um das Spiel Go zu meistern.
Constraint Satisfaction Problem; Was ist ein Constraint Satisfaction Problem (CSP)? 	 Ein CSP ist ein Problem, bei dem eine Lösung gefunden wird, die bestimmte Einschränkungen oder Regeln des Problems erfüllt.
State in CSP; Was ist ein Zustand in einem CSP? 	 Ein Zustand wird durch Variablen \(X_i\) mit Werten aus dem Bereich \(D_i\) definiert.
Goal Test in CSP; Was ist ein Zieltest in einem CSP? 	 Ein Zieltest wird als eine Menge von Einschränkungen \(C\) definiert, die zulässige Kombinationen von Werten für Teilmengen von Variablen spezifizieren.
Real World CSPs; Nenne einige Beispiele für reale CSPs. 	 Beispiele sind Zuordnungsprobleme (z.B. wer unterrichtet welche Klasse), Zeitplanungsprobleme (z.B. welche Klasse wird wann und wo angeboten), Hardwarekonfiguration, Tabellenkalkulationen, Terminplanung und Raumplanung.
Assignment Types; Welche Arten von Zuweisungen gibt es in CSPs? 	 1. Konsistente/Legale Zuweisung: Verletzt keine Einschränkung. 2. Vollständige Zuweisung: Jede Variable hat einen Wert und die Lösung bleibt konsistent. 3. Partielle Zuweisung: Werte werden nur einigen Variablen zugewiesen.
Constraint Graph; Was ist ein Constraint Graph? 	 Ein Constraint Graph ist eine Abstraktion des Problems, bei der jede Variable als Knoten und jede Einschränkung als Kante dargestellt wird.
Four Color Map Theorem; Was besagt das Vier-Farben-Satz? 	 Der Vier-Farben-Satz besagt, dass jede Landkarte mit vier oder weniger Farben so gefärbt werden kann, dass keine benachbarten Regionen dieselbe Farbe haben.
Types of Constraints; Welche Arten von Einschränkungen gibt es in CSPs? 	 1. Unäre Einschränkungen: Betreffen eine einzelne Variable. 2. Binäre Einschränkungen: Betreffen Paare von Variablen. 3. Höhere Ordnung: Betreffen drei oder mehr Variablen. 4. Präferenzen: Nicht bindend, aber möglichst zu respektieren.
Search in CSPs; Wie löst man CSPs durch Suche? 	 1. Werte sukzessive Variablen zuweisen. 2. Alle Einschränkungen überprüfen. 3. Bei Verletzung einer Einschränkung zurückverfolgen. 4. Fortfahren, bis alle Variablen Werte zugewiesen sind.
Backtracking Search; Was ist Backtracking Search? 	 Backtracking Search ist eine Tiefensuche mit Einzelvariablenzuweisungen pro Ebene. Es fügt eine Einschränkung nach der anderen hinzu, ohne Konflikte, und ist erfolgreich, wenn eine legale Zuweisung gefunden wird.
Forward Checking; Was ist Forward Checking? 	 Forward Checking verfolgt die verbleibenden legalen Werte für nicht zugewiesene Variablen und beendet die Suche, wenn eine Variable keine legalen Werte mehr hat.
Arc Consistency; Was ist Arc Consistency? 	 Ein Bogen ist konsistent, wenn für jeden Wert von \(X\) im Bereich von \(X\) ein Wert \(Y\) im Bereich von \(Y\) existiert, der die Einschränkung \(arc(X,Y)\) erfüllt.
Path Consistency; Was ist Path Consistency? 	 Ein Paar von Variablen \((X_i, X_j)\) ist pfad-konsistent mit \(X_m\), wenn für jede Zuweisung, die die Einschränkung auf dem Bogen \((X_i, X_j)\) erfüllt, eine Zuweisung existiert, die die Einschränkungen auf den Bögen \((X_i, X_m)\) und \((X_j, X_m)\) erfüllt.
k-Consistency; Was ist k-Consistency? 	 k-Consistency bedeutet, dass eine Menge von k Werten konsistent sein muss. 1-Consistency = Knoten-Konsistenz, 2-Consistency = Bogen-Konsistenz, 3-Consistency = Pfad-Konsistenz.
Tree-structured CSPs; Was ist ein baumstrukturiertes CSP? 	 Ein CSP ist baumstrukturiert, wenn im Constraint-Graph zwei Variablen durch einen einzigen Pfad verbunden sind. Solche CSPs können in linearer Zeit gelöst werden.
Cutset Conditioning; Was ist Cutset Conditioning? 	 Cutset Conditioning entfernt Knoten, sodass die verbleibenden Knoten einen Baum bilden. Dann wird eine konsistente Zuweisung für die entfernten Knoten gewählt und das verbleibende CSP gelöst.
Min-conflicts Heuristic; Was ist die Min-conflicts Heuristic? 	" Die Min-conflicts Heuristic wählt zufällig eine konfliktbehaftete Variable und wählt den Wert, der die wenigsten Einschränkungen verletzt. Dies ist eine Form des Hill-Climbing mit der Heuristik \(h(n) = \#\) der verletzten Einschränkungen."
First-Order Logic Definition; Was ermöglicht die Prädikatenlogik (First-Order Logic, FOL)? 	 FOL erlaubt die Verwendung von Quantoren und Variablen, um Aussagen zu Objekten und deren Relationen zu formalisieren, z.B. &quot;Es existiert x, sodass x Sokrates ist und x ein Mensch ist&quot;.
Einschränkungen der Aussagenlogik; Welche Einschränkungen hat die Aussagenlogik im Vergleich zur FOL? 	 Aussagenlogik hat: 1. Keine Objekte oder Relationen, 2. Keine Variablen oder Quantoren, 3. Begriffe wie RoommateCarryingUmbrella sind lediglich atomare Symbole ohne Bedeutung.
Quantoren in FOL; Welche zwei Quantoren gibt es in der FOL? 	 Es gibt: 1. **Universellen Quantor**: &quot;Für alle x gilt…&quot;, 2. **Existentiellen Quantor**: &quot;Es existiert x, sodass…&quot;.
Objekte und Relationen; Wie werden Objekte und Relationen in FOL beschrieben? 	 Objekte haben Namen (z.B. John, Umbrella0). Relationen beschreiben Verbindungen zwischen Objekten: **Carrying(John, Umbrella)**. Einstellige Relationen (z.B. **IsUmbrella(x)**) beschreiben Eigenschaften.
Funktionen in FOL; Was sind Funktionen in FOL? 	 Funktionen verweisen auf Objekte ohne Namen, z.B.: **Roommate(Person0)** liefert einen bestimmten Mitbewohner.
"Beispiel für universellen Quantor; Wie lautet der universelle Satz: &#x27;Alle Löwen sind Katzen&#x27; in FOL? "	 **Für alle x: Lion(x) =&gt; Cat(x)**.
"Beispiel für existentiellen Quantor; Wie lautet der Satz: &#x27;Es gibt eine Katze, die kein Löwe ist&#x27; in FOL? "	 **Es existiert x: Cat(x) AND NOT(Lion(x))**.
Substitution (SUBST); Was bewirkt die Substitution in FOL? 	 SUBST ersetzt Variablen in Aussagen durch konkrete Werte oder Terme. Beispiel: **SUBST({x/John}, IsHealthy(x))** ergibt **IsHealthy(John)**.
Skolemisierung; Was passiert bei der Skolemisierung? 	 Existentiell quantifizierte Variablen werden durch konstante Symbole oder Funktionen ersetzt. Beispiel: **Es existiert y** wird zu **k(x)**, einer Funktion, die von x abhängt.
Relation zwischen Quantoren; Wie hängt der universelle Quantor mit dem existentiellen Quantor zusammen? 	 **Für alle x gilt: a** ist äquivalent zu **NICHT(Es existiert x: NICHT(a))**.
CNF für FOL; Wie wird FOL in die Klauselform (CNF) umgewandelt? 	 Schritte: 1. Negation nach innen ziehen, 2. Variablen umbenennen, 3. Existenzquantoren skolemieren, 4. Universelle Quantoren entfernen, 5. Konvertieren in Klauselmengen.
Resolution in FOL; Was ist der Zweck der Resolution in FOL? 	 Resolution ist ein Verfahren, um zu beweisen, ob eine Aussage logisch aus einer Wissensbasis folgt. Sie kombiniert Klauseln, um Widersprüche abzuleiten.
Forward Chaining; Was ist Forward Chaining? 	 Forward Chaining ist ein **datengetriebener Ansatz**: Man startet von bekannten Fakten und wendet Regeln an, um neue Fakten abzuleiten.
Backward Chaining; Was ist Backward Chaining? 	 Backward Chaining ist ein **zielgetriebener Ansatz**: Man startet vom Ziel und bricht es in Teilziele herunter, die durch bekannte Fakten bewiesen werden können.
Gödels Unvollständigkeitssatz; Was besagt der Unvollständigkeitssatz von Gödel informell? 	 In jedem konsistenten Axiomensystem, das die Arithmetik beschreibt, existieren wahre Aussagen, die nicht aus den Axiomen beweisbar sind.
"Beispiel zur CNF; Was ergibt die Aussage &#x27;Wenn jemand etwas isst und nicht getötet wird, dann ist es Essen&#x27; in CNF? "	 **NICHT(eats(x,y)) OR killed(x) OR food(y)**.
"Prolog-Regeln; Was bedeutet eine Prolog-Regel wie &#x27;compatible(Person1, Person2)&#x27;? "	 Eine Regel wie **compatible(Person1, Person2) :- eats(Person1, Food), eats(Person2, Food)** besagt, dass zwei Personen kompatibel sind, wenn sie dasselbe Essen mögen.
Prolog als Datenbanksprache; Wie können Fakten in Prolog als Datenbank betrachtet werden? 	 Prolog-Fakten wie **eats(sam, dal)** entsprechen Zeilen in einer Datenbank. Standardoperationen wie SELECT oder JOIN können durch Regeln abgebildet werden.
Forward vs. Backward Chaining; Was ist der Hauptunterschied zwischen Forward und Backward Chaining? 	 Forward Chaining arbeitet **bottom-up** (von Fakten zu Zielen), während Backward Chaining **top-down** (von Zielen zu Fakten) arbeitet.
Anwendungen von FOL; Wofür wird die FOL in der Praxis eingesetzt? 	 FOL wird verwendet für: 1. **Verifikation** von Hardware und Software, 2. **Wissensrepräsentation** in KI, 3. **Synthetisieren** von Programmen mit logischen Eigenschaften.
Logik; Was ist Logik? 	 Logik ist die Wissenschaft des korrekten Schließens. Sie untersucht, wie aus gegebenen Prämissen gültige Schlussfolgerungen gezogen werden können. In der KI wird Wissen durch logische Systeme formalisiert.
Syntax; Was bedeutet Syntax in der Logik? 	 Syntax beschreibt die formalen Regeln zur Bildung von logischen Sätzen. Sie definiert, welche Zeichenketten in einer Logik zulässig sind, ähnlich wie Grammatik in einer Sprache.
Semantik; Was bedeutet Semantik in der Logik? 	 Semantik beschreibt die Bedeutung der Sätze. Sie legt fest, ob ein Satz unter einer gegebenen Interpretation wahr oder falsch ist.
Beispiel Syntax und Semantik; Wie unterscheiden sich Syntax und Semantik in Programmiersprachen? 	 Syntax stellt sicher, dass der Code korrekt geschrieben ist und kompiliert, während Semantik überprüft, ob der Code das gewünschte Verhalten zeigt.
Knowledge Base (KB); Was ist eine Knowledge Base (KB)? 	 Eine Knowledge Base ist eine Menge von Sätzen in einer formalen Sprache, die Informationen über die Welt beschreibt. Sie dient als Wissensspeicher für logische Agenten.
Inferenzmaschine; Was ist eine Inferenzmaschine? 	 Eine Inferenzmaschine zieht logische Schlussfolgerungen aus einer Knowledge Base, um neues Wissen zu generieren.
Intelligente Agenten; Was macht einen intelligenten Agenten aus? 	 Ein intelligenter Agent nimmt seine Umgebung durch Sensoren wahr, verwendet Wissen zur Entscheidungsfindung und handelt durch Aktuatoren auf die Umgebung ein.
Logische Äquivalenz; Wann sind zwei Sätze logisch äquivalent? 	 Zwei Sätze sind logisch äquivalent, wenn sie für jede mögliche Belegung der Variablen denselben Wahrheitswert haben.
Tautologie; Was ist eine Tautologie? 	 Eine Tautologie ist ein Satz, der unter jeder möglichen Belegung der Variablen wahr ist. Beispiel: \\((P OR NOT(P))\\).
Inferenz; Was bedeutet Inferenz in der Aussagenlogik? 	 Inferenz ist der Prozess, neue Sätze aus gegebenen Sätzen (Knowledge Base) abzuleiten. Ein Satz \\( a \\) ist aus KB ableitbar, wenn \\( a \\) in allen Modellen der KB wahr ist.
Modus Ponens; Was ist das Inferenzmuster Modus Ponens? 	 Modus Ponens lautet: Wenn \\( P \\) wahr ist und \\( P =&gt; Q \\) wahr ist, dann ist auch \\( Q \\) wahr.
Einheitliche Klauselform (CNF); Was ist die Konjunktive Normalform? 	 Eine logische Formel in CNF ist eine Konjunktion von Klauseln, wobei jede Klausel eine Disjunktion von Literalen ist. Beispiel: \\((A OR B) AND (NOT(A) OR C)\\).
Resolution; Wie funktioniert Resolution in der Aussagenlogik? 	 Resolution ist ein Beweisverfahren, bei dem widersprüchliche Klauseln kombiniert werden, um die leere Klausel zu erzeugen, was auf eine Unvereinbarkeit hinweist.
Horn-Klauseln; Was sind Horn-Klauseln? 	 Eine Horn-Klausel ist eine Klausel mit höchstens einem positiven Literal. Sie werden häufig in effizienten Inferenzsystemen verwendet.
Beispiel Horn-Klauseln; Wie sieht eine Horn-Klausel aus? 	 Beispiel: \\((NOT(A) OR NOT(B) OR C))\\ ist eine Horn-Klausel, da sie höchstens ein positives Literal (C) enthält.
Wumpus-Welt; Was ist die Wumpus-Welt? 	 Die Wumpus-Welt ist ein KI-Problem, bei dem ein Agent Informationen aus Sensoren wie Gestank oder Brise verwendet, um Hindernissen und Gefahren auszuweichen.
Beispiel Wumpus-Welt; Welche Sensoren hat der Agent in der Wumpus-Welt? 	 Der Agent verfügt über: **Stench** (Gestank), **Breeze** (Brise), **Glitter** (Glitzern), **Bump** (Stoßen), **Scream** (Schrei).
"Beweisführung; Wie kann man beweisen, dass &#x27;SprinklersOn&#x27; wahr ist? "	 Durch Modus Ponens und Resolution: Gegeben die Aussagen der Knowledge Base, kann Schritt für Schritt logisch gezeigt werden, dass die Sprinkler eingeschaltet sind.
Limitationen der Aussagenlogik; Welche Nachteile hat die Aussagenlogik? 	 1. Keine Objekte oder Relationen, 2. Begrenzte Ausdruckskraft, 3. Fehlende Variablen, die Aussagen verallgemeinern.
Aristotelisches Prinzip; Was besagt das Prinzip des Non-Contradiction? 	 Das Prinzip des Non-Contradiction besagt, dass ein Satz nicht gleichzeitig wahr und falsch sein kann. Beispiel: \\( P AND NOT(P) \\) ist immer falsch.
Unit Resolution; Was ist Unit Resolution? 	 Unit Resolution ist eine vereinfachte Form der Resolution, bei der eine Klausel mit nur einem Literal verwendet wird, um andere Klauseln zu reduzieren.
Generelle Resolution; Wie funktioniert allgemeine Resolution? 	 Bei der allgemeinen Resolution werden zwei Klauseln kombiniert, die ein positives und ein negatives Literal gemeinsam haben, um neue Klauseln zu erzeugen.
Zusammenfassung; Was sollte man aus dieser Sitzung über Aussagenlogik gelernt haben? 	 Man sollte: 1. Aussagen in Logik übersetzen können, 2. Logische Schlussfolgerungen ziehen, 3. CNF-Form erstellen, 4. Resolution anwenden, um Beweise zu führen.
