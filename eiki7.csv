"First-Order Logic Definition; Was ermöglicht die Prädikatenlogik (First-Order Logic, FOL)?" | FOL erlaubt die Verwendung von Quantoren und Variablen, um Aussagen zu Objekten und deren Relationen zu formalisieren, z.B. "Es existiert x, sodass x Sokrates ist und x ein Mensch ist".
"Einschränkungen der Aussagenlogik; Welche Einschränkungen hat die Aussagenlogik im Vergleich zur FOL?" | Aussagenlogik hat: 1. Keine Objekte oder Relationen, 2. Keine Variablen oder Quantoren, 3. Begriffe wie RoommateCarryingUmbrella sind lediglich atomare Symbole ohne Bedeutung.
"Quantoren in FOL; Welche zwei Quantoren gibt es in der FOL?" | Es gibt: 1. **Universellen Quantor**: "Für alle x gilt…", 2. **Existentiellen Quantor**: "Es existiert x, sodass…".
"Objekte und Relationen; Wie werden Objekte und Relationen in FOL beschrieben?" | Objekte haben Namen (z.B. John, Umbrella0). Relationen beschreiben Verbindungen zwischen Objekten: **Carrying(John, Umbrella)**. Einstellige Relationen (z.B. **IsUmbrella(x)**) beschreiben Eigenschaften.
"Funktionen in FOL; Was sind Funktionen in FOL?" | Funktionen verweisen auf Objekte ohne Namen, z.B.: **Roommate(Person0)** liefert einen bestimmten Mitbewohner.
"Beispiel für universellen Quantor; Wie lautet der universelle Satz: 'Alle Löwen sind Katzen' in FOL?" | **Für alle x: Lion(x) => Cat(x)**.
"Beispiel für existentiellen Quantor; Wie lautet der Satz: 'Es gibt eine Katze, die kein Löwe ist' in FOL?" | **Es existiert x: Cat(x) AND NOT(Lion(x))**.
"Substitution (SUBST); Was bewirkt die Substitution in FOL?" | SUBST ersetzt Variablen in Aussagen durch konkrete Werte oder Terme. Beispiel: **SUBST({x/John}, IsHealthy(x))** ergibt **IsHealthy(John)**.
"Skolemisierung; Was passiert bei der Skolemisierung?" | Existentiell quantifizierte Variablen werden durch konstante Symbole oder Funktionen ersetzt. Beispiel: **Es existiert y** wird zu **k(x)**, einer Funktion, die von x abhängt.
"Relation zwischen Quantoren; Wie hängt der universelle Quantor mit dem existentiellen Quantor zusammen?" | **Für alle x gilt: a** ist äquivalent zu **NICHT(Es existiert x: NICHT(a))**.
"CNF für FOL; Wie wird FOL in die Klauselform (CNF) umgewandelt?" | Schritte: 1. Negation nach innen ziehen, 2. Variablen umbenennen, 3. Existenzquantoren skolemieren, 4. Universelle Quantoren entfernen, 5. Konvertieren in Klauselmengen.
"Resolution in FOL; Was ist der Zweck der Resolution in FOL?" | Resolution ist ein Verfahren, um zu beweisen, ob eine Aussage logisch aus einer Wissensbasis folgt. Sie kombiniert Klauseln, um Widersprüche abzuleiten.
"Forward Chaining; Was ist Forward Chaining?" | Forward Chaining ist ein **datengetriebener Ansatz**: Man startet von bekannten Fakten und wendet Regeln an, um neue Fakten abzuleiten.
"Backward Chaining; Was ist Backward Chaining?" | Backward Chaining ist ein **zielgetriebener Ansatz**: Man startet vom Ziel und bricht es in Teilziele herunter, die durch bekannte Fakten bewiesen werden können.
"Gödels Unvollständigkeitssatz; Was besagt der Unvollständigkeitssatz von Gödel informell?" | In jedem konsistenten Axiomensystem, das die Arithmetik beschreibt, existieren wahre Aussagen, die nicht aus den Axiomen beweisbar sind.
"Beispiel zur CNF; Was ergibt die Aussage 'Wenn jemand etwas isst und nicht getötet wird, dann ist es Essen' in CNF?" | **NICHT(eats(x,y)) OR killed(x) OR food(y)**.
"Prolog-Regeln; Was bedeutet eine Prolog-Regel wie 'compatible(Person1, Person2)'?" | Eine Regel wie **compatible(Person1, Person2) :- eats(Person1, Food), eats(Person2, Food)** besagt, dass zwei Personen kompatibel sind, wenn sie dasselbe Essen mögen.
"Prolog als Datenbanksprache; Wie können Fakten in Prolog als Datenbank betrachtet werden?" | Prolog-Fakten wie **eats(sam, dal)** entsprechen Zeilen in einer Datenbank. Standardoperationen wie SELECT oder JOIN können durch Regeln abgebildet werden.
"Forward vs. Backward Chaining; Was ist der Hauptunterschied zwischen Forward und Backward Chaining?" | Forward Chaining arbeitet **bottom-up** (von Fakten zu Zielen), während Backward Chaining **top-down** (von Zielen zu Fakten) arbeitet.
"Anwendungen von FOL; Wofür wird die FOL in der Praxis eingesetzt?" | FOL wird verwendet für: 1. **Verifikation** von Hardware und Software, 2. **Wissensrepräsentation** in KI, 3. **Synthetisieren** von Programmen mit logischen Eigenschaften.
